/*
 * generated by Xtext 2.10.0
 */
package org.boomslang.generator.geb.mapping.core.test

import com.google.inject.Guice
import com.google.inject.Injector
import org.boomslang.dsl.feature.FeatureStandaloneSetup
import org.boomslang.wireframesketcher.model.xtext.BoomslangWFSModelResourceFactory
import org.boomslang.wireframesketcher.model.xtext.ScreenEmfSupport
import org.boomslang.wireframesketcher.model.xtext.ScreenStandaloneSetupGenerated
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.junit4.GlobalRegistries
import org.eclipse.xtext.junit4.GlobalRegistries.GlobalStateMemento
import org.eclipse.xtext.junit4.IInjectorProvider
import org.eclipse.xtext.junit4.IRegistryConfigurator

class MappingInjectorProvider implements IInjectorProvider, IRegistryConfigurator {
	protected GlobalStateMemento stateBeforeInjectorCreation
	protected GlobalStateMemento stateAfterInjectorCreation
	protected Injector injector
	static final Void static_initializer = {
		{
			GlobalRegistries.initializeDefaults()
		}
		null
	}

	override Injector getInjector() {
		if (injector === null) {
			stateBeforeInjectorCreation = GlobalRegistries.makeCopyOfGlobalState()
			this.injector = internalCreateInjector()
			stateAfterInjectorCreation = GlobalRegistries.makeCopyOfGlobalState()
		}
		return injector
	}

	def protected Injector internalCreateInjector() {
		new ScreenEmfSupport().preInvoke()
		new ScreenStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("screen",
			new BoomslangWFSModelResourceFactory())
		return new FeatureStandaloneSetup() {
			override Injector createInjector() {
				return Guice.createInjector(createRuntimeModule())
			}
		}.createInjectorAndDoEMFRegistration()
	}

	def protected MappingGeneratorRuntimeModule createRuntimeModule() {
		// make it work also with Maven/Tycho and OSGI
		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=493672
		return new MappingGeneratorRuntimeModule() {
			override ClassLoader bindClassLoaderToInstance() {
				return MappingInjectorProvider.getClassLoader()
			}
		}
	}

	override void restoreRegistry() {
		stateBeforeInjectorCreation.restoreGlobalState()
	}

	override void setupRegistry() {
		getInjector()
		stateAfterInjectorCreation.restoreGlobalState()
	}
}
